package org.example;

import java.util.*;

public abstract class MyDriver_rep_base {

    protected List<Driver> drivers = new ArrayList<>();
    protected final String filePath;

    public MyDriver_rep_base(String filePath) {
        this.filePath = filePath;
    }

    // Абстрактные методы (чтение и запись разные для JSON/YAML)
    public abstract void readAll();
    public abstract void writeAll();

    // Общие методы для всех репозиториев
    public Driver getById(int id) {
        for (Driver d : drivers) {
            if (d.getDriverId() == id) {
                return d;
            }
        }
        return null;
    }

    public List<Driver> get_k_n_short_list(int k, int n) {
        int start = (n - 1) * k;
        int end = Math.min(start + k, drivers.size());
        if (start >= drivers.size()) return new ArrayList<>();
        return drivers.subList(start, end);
    }

    public void sortByExperience() {
        drivers.sort(Comparator.comparingInt(Driver::getExperience));
    }

    public void sortByPayment() {
        drivers.sort(Comparator.comparingDouble(Driver::getPayment));
    }

    public void addDriver(Driver driver) {
        int newId = drivers.stream()
                .mapToInt(Driver::getDriverId)
                .max()
                .orElse(0) + 1;
        Driver newDriver = new Driver(
                newId,
                driver.getFirstName(),
                driver.getMiddleName(),
                driver.getLastName(),
                driver.getExperience(),
                driver.getPayment()
        );
        drivers.add(newDriver);
        writeAll();
    }

    public boolean replaceById(int id, Driver newDriver) {
        for (int i = 0; i < drivers.size(); i++) {
            if (drivers.get(i).getDriverId() == id) {
                Driver updated = new Driver(
                        id,
                        newDriver.getFirstName(),
                        newDriver.getMiddleName(),
                        newDriver.getLastName(),
                        newDriver.getExperience(),
                        newDriver.getPayment()
                );
                drivers.set(i, updated);
                writeAll();
                return true;
            }
        }
        return false;
    }

    public boolean deleteById(int id) {
        boolean removed = drivers.removeIf(d -> d.getDriverId() == id);
        if (removed) writeAll();
        return removed;
    }

    public int getCount() {
        return drivers.size();
    }

    public void printAll() {
        if (drivers.isEmpty()) {
            System.out.println("Список водителей пуст.");
            return;
        }
        for (Driver d : drivers) {
            System.out.println(d);
        }
    }
}
